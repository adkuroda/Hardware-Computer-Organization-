


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; System Call Table
    6 00000000 20001000 
                       HEAP_TOP
                               EQU              0x20001000
    7 00000000 20004FE0 
                       HEAP_BOT
                               EQU              0x20004FE0
    8 00000000 00004000 
                       MAX_SIZE
                               EQU              0x00004000  ; 16KB = 2^14
    9 00000000 00000020 
                       MIN_SIZE
                               EQU              0x00000020  ; 32B  = 2^5
   10 00000000         
   11 00000000 20006800 
                       MCB_TOP EQU              0x20006800  ; 2^10B = 1K Space
   12 00000000 20006BFE 
                       MCB_BOT EQU              0x20006BFE
   13 00000000 00000002 
                       MCB_ENT_SZ
                               EQU              0x00000002  ; 2B per entry
   14 00000000 00000200 
                       MCB_TOTAL
                               EQU              512         ; 2^9 = 512 entries
                                                            
   15 00000000         
   16 00000000 FFFFFFFF 
                       INVALID EQU              -1          ; an invalid id
   17 00000000         
   18 00000000         ;
   19 00000000         ; Each MCB Entry
   20 00000000         ; FEDCBA9876543210
   21 00000000         ; 00SSSSSSSSS0000U     S bits are used for Heap size, U=
                       1 Used U=0 Not Used
   22 00000000         
   23 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   24 00000000         ; Memory Control Block Initialization
   25 00000000         ; void _kinit( )
   26 00000000         ; this routine must be called from Reset_Handler in star
                       tup_TM4C129.s
   27 00000000         ; before you invoke main( ) in driver_keil
   28 00000000                 EXPORT           _kinit
   29 00000000         _kinit
   30 00000000         
   31 00000000         ;void _kinit() {
   32 00000000         ;  for (int i = 0x20001000; i < 0x20005000; i++) {
   33 00000000         ;   array[m2a(i)] = 0;
   34 00000000         ;  }
   35 00000000         
   36 00000000         ;  *(short *)&array[m2a(mcb_top)] = max_size;
   37 00000000         
   38 00000000         ; for (int i = 0x20006802; i < 0x20006C00; i += 2) {



ARM Macro Assembler    Page 2 


   39 00000000         ;    array[m2a(i)] = 0;
   40 00000000         ;    array[m2a(i + 1)] = 0;
   41 00000000         ; }
   42 00000000         ; }
   43 00000000         ; *********************** MY CODE GOES HERE ************
                       ************
   44 00000000         ; you must correctly set the value of each MCB block
   45 00000000         ; complete your code
   46 00000000 E92D 5FFE       PUSH             {r1 -r12, lr}
   47 00000004         ;  for (int i = 0x20001000; i < 0x20005000; i++) 
   48 00000004         ;   array[m2a(i)] = 0;
   49 00000004         
   50 00000004 497C            LDR              r1, =HEAP_TOP ; r1 = 0x20001000
                                                            
   51 00000006 4A7D            LDR              r2, =HEAP_BOT 
                                                            ; r2  = 0x20004FE0
   52 00000008 F04F 0320       LDR              r3, =MIN_SIZE ;r3 = 0x00000020
   53 0000000C 441A            ADD              r2, r2, r3  ; r2 = 0x20005000
   54 0000000E         loop_heap
   55 0000000E         ;MOV r4, #0x1  ; COMMENT OUT TESTING PURPOSE 
   56 0000000E F04F 0400       MOV              R4, #0x0
   57 00000012 4291            CMP              r1, r2      ;check the loop if 
                                                            readed to end
   58 00000014 D002            BEQ              next        ;if equal then move
                                                             to next part 
   59 00000016 F801 4B01       STRB             r4, [r1], #1 ;store 0 to locaat
                                                            ion where r1 is and
                                                             advance the r1 by 
                                                            one byte
   60 0000001A E7F8            B                loop_heap   ; go back to loop 
   61 0000001C         ; *(short *)&array[m2a(mcb_top)] = max_size;
   62 0000001C         next
   63 0000001C 4978            LDR              r1, =MCB_TOP ;r1 = 0x20006800 ;
                                                            get MCB top to r1 
   64 0000001E F44F 4280       LDR              r2, =MAX_SIZE ;r2 = 0x00004000;
                                                             get the max size r
                                                            2
   65 00000022 F841 2B02       STR              r2, [r1], #0x2 ;strore 0x000040
                                                            00 to first 2 bit o
                                                            f 0x20006800 and ad
                                                            vance by 2 
   66 00000026         
   67 00000026         
   68 00000026         ; for (int i = 0x20006802; i < 0x20006C00; i += 2) {
   69 00000026         ;    array[m2a(i)] = 0;
   70 00000026         ;    array[m2a(i + 1)] = 0;
   71 00000026         ; }
   72 00000026         loop_BCM
   73 00000026 4A77            LDR              r2, =MCB_BOT ;r2 = 0x20006BFE
   74 00000028 F04F 0302       LDR              r3, =MCB_ENT_SZ 
                                                            ;r3 = 0x00000002
   75 0000002C 441A            ADD              r2, r2, r3  ;r2 = 0x20006C00
   76 0000002E 4291            CMP              r1, r2
   77 00000030 D004            BEQ              end_BCM
   78 00000032 F801 4B01       STRB             r4, [r1], #0x1
   79 00000036 F801 4B01       STRB             r4, [r1], #0x1
   80 0000003A E7F4            B                loop_BCM
   81 0000003C         
   82 0000003C         end_BCM



ARM Macro Assembler    Page 3 


   83 0000003C E8BD 5FFE       POP              {r1 - r12, lr}
   84 00000040         
   85 00000040         ; ********************** END ***************************
                       ***************
   86 00000040 4770            BX               lr
   87 00000042         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   88 00000042         ; Kernel Memory Allocation
   89 00000042         ; void* _k_alloc( int size )
   90 00000042         
   91 00000042         ;void *_ralloc(int size, int left_mcb_addr, int right_mc
                       b_addr) {
   92 00000042         ;int entire_mcb_addr_space = right_mcb_addr - left_mcb_a
                       ddr + mcb_ent_sz;
   93 00000042         ;int half_mcb_addr_space = entire_mcb_addr_space / 2;
   94 00000042         ;int midpoint_mcb_addr = left_mcb_addr + half_mcb_addr_s
                       pace;
   95 00000042         ;int heap_addr = 0;
   96 00000042         ;int act_entire_heap_size = entire_mcb_addr_space * 16;
   97 00000042         ;int act_half_heap_size = half_mcb_addr_space * 16;
   98 00000042         
   99 00000042         ;if (size <= act_half_heap_size) {
  100 00000042         ;void *heap_addr =_ralloc(size, left_mcb_addr, midpoint_
                       mcb_addr - mcb_ent_sz);
  101 00000042         ;if (heap_addr == 0) {
  102 00000042         ;return _ralloc(size, midpoint_mcb_addr, right_mcb_addr)
                       ;
  103 00000042         ;}
  104 00000042         ;if ((array[m2a(midpoint_mcb_addr)] & 0x01) == 0) {
  105 00000042         ;*(short *)&array[m2a(midpoint_mcb_addr)] = act_half_hea
                       p_size;
  106 00000042         ;}
  107 00000042         ;return heap_addr;
  108 00000042         ;}
  109 00000042         
  110 00000042         ;if ((array[m2a(left_mcb_addr)] & 0x01) != 0) {
  111 00000042         ;return 0;
  112 00000042         ;}
  113 00000042         
  114 00000042         ;if (*(short *)&array[m2a(left_mcb_addr)] < act_entire_h
                       eap_size) {
  115 00000042         ;return 0;
  116 00000042         ;}
  117 00000042         
  118 00000042         ;*(short *)&array[m2a(left_mcb_addr)] = act_entire_heap_
                       size | 0x01;
  119 00000042         ;return (void *)(heap_top + (left_mcb_addr - mcb_top) * 
                       16);
  120 00000042         
  121 00000042         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  122 00000042         
  123 00000042         
  124 00000042         _ralloc
  125 00000042 E92D 4FF0       PUSH             {r4-r11, lr}
  126 00000046 F04F 0A02       LDR              r10, =MCB_ENT_SZ
  127 0000004A         
  128 0000004A         ; int entire_mcb_addr_space = right_mcb_addr - left_mcb_
                       addr + mcb_ent_sz;



ARM Macro Assembler    Page 4 


  129 0000004A EBA3 0402       SUB              r4, r3, r2
  130 0000004E 4454            ADD              r4, r4, r10 ;r4 = entire_mcb_ad
                                                            dr_space
  131 00000050         
  132 00000050         ; int half_mcb_addr_space = entire_mcb_addr_space / 2;
  133 00000050 4625            MOV              r5, r4
  134 00000052 EA4F 0555       LSR              r5, #0x1    ; r5 = half_mcb_add
                                                            r_space
  135 00000056         
  136 00000056         ; int midpoint_mcb_addr = left_mcb_addr + half_mcb_addr_
                       space;
  137 00000056 EB02 0605       ADD              r6, r2, r5  ;r6 = midpoint_mcb_
                                                            addr
  138 0000005A         
  139 0000005A         ; int act_entire_heap_size = entire_mcb_addr_space * 16;
                       
  140 0000005A EA4F 1704       LSL              r7, r4, #0x4 ;r7 = act_entire_h
                                                            eap_size
  141 0000005E         
  142 0000005E         ; int act_half_heap_size = half_mcb_addr_space * 16;
  143 0000005E EA4F 1805       LSL              r8, r5, #4  ; r8 = act_half_hea
                                                            p_size 
  144 00000062         
  145 00000062         ; if (size <= act_half_heap_size)
  146 00000062 4541            CMP              r1, r8
  147 00000064 DC17            BGT              else
  148 00000066         
  149 00000066         ;void *heap_addr =_ralloc(size, left_mcb_addr, midpoint_
                       mcb_addr - mcb_ent_sz);
  150 00000066 B408            PUSH             {r3}
  151 00000068 EBA6 030A       SUB              r3, r6, r10
  152 0000006C         ;PUSH  {r4-r11, lr}
  153 0000006C F7FF FFE9       BL               _ralloc     ;call _ralloc on le
                                                            ft side
  154 00000070 BC08            POP              {r3}
  155 00000072         ;POP  {r4-r11, lr}
  156 00000072 4681            MOV              r9, r0      ; assign to herturn
                                                             value to head_add
  157 00000074         
  158 00000074         ;if (heap_addr == 0) 
  159 00000074 F1B9 0F00       CMP              r9, #0x0
  160 00000078 D103            BNE              success
  161 0000007A         
  162 0000007A         
  163 0000007A         ;return _ralloc(size, midpoint_mcb_addr, right_mcb_addr)
                       ;    
  164 0000007A 4632            MOV              r2, r6
  165 0000007C         ;PUSH  {r4-r11, lr}
  166 0000007C F7FF FFE1       BL               _ralloc     ; call _ralloc righ
                                                            t side 
  167 00000080         ;POP  {r4-r11, lr}
  168 00000080 E027            B                end
  169 00000082         
  170 00000082         
  171 00000082         ;if ((array[m2a(midpoint_mcb_addr)] & 0x01) == 0) {
  172 00000082         ;*(short *)&array[m2a(midpoint_mcb_addr)] = act_half_hea
                       p_size;
  173 00000082         ;return heap_addr;
  174 00000082         success



ARM Macro Assembler    Page 5 


  175 00000082 F896 B000       LDRB             r11, [r6]   ; r11 = array[m2a(m
                                                            idpoint_mcb_addr)]
  176 00000086 F00B 0B01       AND              r11, #0x01  ; array[m2a(midpoin
                                                            t_mcb_addr)] & 0x01
                                                            )
  177 0000008A F1BB 0F00       CMP              r11, #0
  178 0000008E D11E            BNE              end_1       ; raturn heap_addr
  179 00000090 F8A6 8000       STRH             r8, [r6]
  180 00000094 E01B            B                end_1       ; ;return heap_addr
                                                            
  181 00000096         
  182 00000096         else
  183 00000096         
  184 00000096         ;if ((array[m2a(left_mcb_addr)] & 0x01) != 0) {
  185 00000096         ;return 0;
  186 00000096 F892 B000       LDRB             r11, [r2]   ;r11 = (array[m2a(l
                                                            eft_mcb_addr)
  187 0000009A F00B 0B01       AND              r11, #0x01  ; array[m2a(left_mc
                                                            b_addr)] & 0x01
  188 0000009E F1BB 0F00       CMP              r11, #0     ; check if it is us
                                                            ed. 
  189 000000A2 D111            BNE              failure     ; this will jump to
                                                             failure and return
                                                             0 
  190 000000A4         
  191 000000A4         
  192 000000A4         ;if (*(short *)&array[m2a(left_mcb_addr)] < act_entire_h
                       eap_size) {
  193 000000A4         ;return 0;
  194 000000A4         ; if MCB size < heap size, return 0
  195 000000A4 F8B2 B000       LDRH             r11, [r2]   ;r11 =  *(short *)&
                                                            array[m2a(left_mcb_
                                                            addr)
  196 000000A8 45BB            CMP              r11, r7     ; compare with actu
                                                            al entire heap size
                                                             
  197 000000AA DB0D            BLT              failure     ; if less than retu
                                                            rn 0
  198 000000AC         
  199 000000AC         ;*(short *)&array[m2a(left_mcb_addr)] = act_entire_heap_
                       size | 0x01;
  200 000000AC         
  201 000000AC 46BB            MOV              r11, r7     ;r11 = act_entire_h
                                                            eap_size
  202 000000AE F04B 0B01       ORR              r11, #0x01  ; act_entire_heap_s
                                                            ize | 0x01
  203 000000B2 F8A2 B000       STRH             r11, [r2]   ; assing the value 
                                                            to *(short *)&array
                                                            [m2a(left_mcb_addr)
                                                            
  204 000000B6         
  205 000000B6         ;return (void *)(heap_top + (left_mcb_addr - mcb_top) * 
                       16);
  206 000000B6 F8DF B140       LDR              r11, =HEAP_TOP
  207 000000BA F8DF C144       LDR              r12, =MCB_TOP
  208 000000BE EBA2 0C0C       SUB              r12, r2, r12
  209 000000C2 EB0B 100C       ADD              r0, r11, r12, LSL #4
  210 000000C6 E004            B                end         ; this will return
  211 000000C8         



ARM Macro Assembler    Page 6 


  212 000000C8         failure
  213 000000C8 F04F 0000       MOV              r0, #0      ; load 0 as return 
                                                            value 
  214 000000CC E001            B                end         ;return 
  215 000000CE         
  216 000000CE         end_1
  217 000000CE 4648            MOV              r0, r9
  218 000000D0 E7FF            B                end
  219 000000D2         
  220 000000D2         end
  221 000000D2 E8BD 4FF0       POP              {r4-r11, lr}
  222 000000D6 4770            BX               lr
  223 000000D8         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  224 000000D8         ;int _rfree(int mcb_addr) {
  225 000000D8         ;  short mcb_contents = *(short *)&array[m2a(mcb_addr)];
                       
  226 000000D8         ;  int mcb_index = mcb_addr - mcb_top;
  227 000000D8         ;  short mcb_disp = (mcb_contents /= 16);
  228 000000D8         ;  short my_size = (mcb_contents *= 16);
  229 000000D8         ;  *(short *)&array[m2a(mcb_addr)] = mcb_contents;
  230 000000D8         ;  if ((mcb_index / mcb_disp) % 2 == 0) {
  231 000000D8         ;    if (mcb_addr + mcb_disp >= mcb_bot) {
  232 000000D8         ;      return 0; // my buddy is beyond mcb_bot!
  233 000000D8         ;    }
  234 000000D8         ;    short mcb_buddy = *(short *)&array[m2a(mcb_addr + m
                       cb_disp)];
  235 000000D8         ;    if ((mcb_buddy & 0x0001) == 0) {
  236 000000D8         ;      mcb_buddy = (mcb_buddy / 32) * 32;
  237 000000D8         ;      if (mcb_buddy == my_size) {
  238 000000D8         ;        *(short *)&array[m2a(mcb_addr + mcb_disp)] = 0;
                       
  239 000000D8         ;        my_size *= 2;
  240 000000D8         ;        *(short *)&array[m2a(mcb_addr)] = my_size;
  241 000000D8         ;        return _rfree(mcb_addr);
  242 000000D8         ;      }
  243 000000D8         ;    }
  244 000000D8         ;  } else {
  245 000000D8         ;    if (mcb_addr - mcb_disp < mcb_top) {
  246 000000D8         ;      return 0; // my buddy is below mcb_top!
  247 000000D8         ;    }
  248 000000D8         ;    short mcb_buddy = *(short *)&array[m2a(mcb_addr - m
                       cb_disp)];
  249 000000D8         ;    if ((mcb_buddy & 0x0001) == 0) {
  250 000000D8         ;      mcb_buddy = (mcb_buddy / 32) * 32;
  251 000000D8         ;      if (mcb_buddy == my_size) {
  252 000000D8         ;        *(short *)&array[m2a(mcb_addr)] = 0;
  253 000000D8         ;        my_size *= 2;
  254 000000D8         ;        *(short *)&array[m2a(mcb_addr - mcb_disp)] = my
                       _size;
  255 000000D8         ;        return _rfree(mcb_addr - mcb_disp);
  256 000000D8         ;      }
  257 000000D8         ;    }
  258 000000D8         ;  }
  259 000000D8         ;  return mcb_addr;
  260 000000D8         ;}
  261 000000D8         
  262 000000D8         
  263 000000D8         _rfree



ARM Macro Assembler    Page 7 


  264 000000D8 B500            PUSH             {lr}
  265 000000DA F8DF A124       LDR              r10, =MCB_TOP
  266 000000DE F8DF B124       LDR              r11, =MCB_BOT
  267 000000E2         ;  short mcb_contents = *(short *)&array[m2a(mcb_addr)];
                       
  268 000000E2 880A            LDRH             r2, [r1]
  269 000000E4         ;  int mcb_index = mcb_addr - mcb_top;
  270 000000E4 EBA1 030A       SUB              r3, r1, r10
  271 000000E8         ;  short mcb_disp = (mcb_contents /= 16);
  272 000000E8 EA4F 1212       LSR              r2, r2, #0x4
  273 000000EC 4614            MOV              r4, r2
  274 000000EE         ;  short my_size = (mcb_contents *= 16);
  275 000000EE EA4F 1202       LSL              r2, #0x4
  276 000000F2 4615            MOV              r5, r2
  277 000000F4         ;  *(short *)&array[m2a(mcb_addr)] = mcb_contents;
  278 000000F4 800A            STRH             r2, [r1]
  279 000000F6         ;  if ((mcb_index / mcb_disp) % 2 == 0) {
  280 000000F6 FB93 F6F4       SDIV             r6, r3, r4
  281 000000FA F04F 0702       MOV              r7, #0x2
  282 000000FE FB96 F8F7       SDIV             r8, r6, r7
  283 00000102 FB07 6918       MLS              r9, r7, r8, r6
  284 00000106 F1B9 0F00       CMP              r9, #0x0
  285 0000010A D120            BNE              right
  286 0000010C         
  287 0000010C         ;if (mcb_addr + mcb_disp >= mcb_bot)
  288 0000010C EB01 0604       ADD              r6, r1, r4
  289 00000110 455E            CMP              r6, r11
  290 00000112 DA40            BGE              beyond_mcb  ;      return 0; //
                                                             my buddy is beyond
                                                             mcb_bot!
  291 00000114         
  292 00000114         ;    short mcb_buddy = *(short *)&array[m2a(mcb_addr + m
                       cb_disp)];
  293 00000114 EB01 0604       ADD              r6, r1, r4
  294 00000118 8837            LDRH             r7, [r6]
  295 0000011A         
  296 0000011A         ;    if ((mcb_buddy & 0x0001) == 0)
  297 0000011A F007 0801       AND              r8, r7, #0x0001
  298 0000011E F1B8 0F00       CMP              r8, #0x0
  299 00000122         ;if ((mcb_buddy & 0x0001) == 0) 
  300 00000122 D13B            BNE              occupied
  301 00000124         ;  mcb_buddy = (mcb_buddy / 32) * 32;
  302 00000124 EA4F 1757       LSR              r7, r7, #0x5
  303 00000128 EA4F 1747       LSL              r7, r7, #0x5
  304 0000012C         ;if (mcb_buddy == my_size)
  305 0000012C 42AF            CMP              r7, r5
  306 0000012E D135            BNE              occupied
  307 00000130         ; *(short *)&array[m2a(mcb_addr + mcb_disp)] = 0;
  308 00000130 EB01 0604       ADD              r6, r1, r4
  309 00000134 F04F 0700       MOV              r7, #0x0
  310 00000138 8037            STRH             r7, [r6]
  311 0000013A         ;my_size *= 2;
  312 0000013A EA4F 0545       LSL              r5, r5, #0x1
  313 0000013E         ;*(short *)&array[m2a(mcb_addr)] = my_size;
  314 0000013E 800D            STRH             r5, [r1]
  315 00000140         ;        return _rfree(mcb_addr);
  316 00000140 E92D 4FFC       PUSH             {r2 - r11, lr}
  317 00000144 F7FF FFC8       BL               _rfree
  318 00000148 E8BD 4FFC       POP              {r2-r11, lr}



ARM Macro Assembler    Page 8 


  319 0000014C E028            B                end_3
  320 0000014E         
  321 0000014E         
  322 0000014E         right
  323 0000014E         ;    if (mcb_addr - mcb_disp < mcb_top) {
  324 0000014E EBA1 0604       SUB              r6, r1, r4
  325 00000152 4556            CMP              r6, r10
  326 00000154 DB1F            BLT              beyond_mcb  ;      return 0; //
                                                             my buddy is below 
                                                            mcb_top!
  327 00000156         ;    short mcb_buddy = *(short *)&array[m2a(mcb_addr - m
                       cb_disp)];
  328 00000156 EBA1 0604       SUB              r6, r1, r4
  329 0000015A 8837            LDRH             r7, [r6]
  330 0000015C         ;if ((mcb_buddy & 0x0001) == 0) 
  331 0000015C F007 0801       AND              r8, r7, #0x0001
  332 00000160 F1B8 0F00       CMP              r8, #0x0
  333 00000164 D11A            BNE              occupied
  334 00000166         ;  mcb_buddy = (mcb_buddy / 32) * 32;
  335 00000166 EA4F 1757       LSR              r7, r7, #0x5
  336 0000016A EA4F 1747       LSL              r7, r7, #0x5
  337 0000016E         ;if (mcb_buddy == my_size) 
  338 0000016E 42AF            CMP              r7, r5
  339 00000170 D114            BNE              occupied
  340 00000172         ; *(short *)&array[m2a(mcb_addr)] = 0;
  341 00000172 F04F 0800       MOV              r8, #0x0
  342 00000176 F8A1 8000       STRH             r8, [r1]
  343 0000017A         ;        my_size *= 2;
  344 0000017A EA4F 0545       LSL              r5, r5, #0x1
  345 0000017E         ;*(short *)&array[m2a(mcb_addr - mcb_disp)] = my_size;
  346 0000017E EBA1 0604       SUB              r6, r1, r4
  347 00000182 8035            STRH             r5, [r6]
  348 00000184 EBA1 0104       SUB              r1, r1, r4
  349 00000188         ;        return _rfree(mcb_addr - mcb_disp);
  350 00000188 E92D 4FFC       PUSH             {r2 - r11, lr}
  351 0000018C F7FF FFA4       BL               _rfree
  352 00000190 E8BD 4FFC       POP              {r2-r11, lr}
  353 00000194 E004            B                end_3
  354 00000196         
  355 00000196         
  356 00000196         beyond_mcb
  357 00000196 F04F 0000       MOV              r0, #0x0
  358 0000019A E001            B                end_3
  359 0000019C         
  360 0000019C         occupied
  361 0000019C 4608            MOV              r0, r1
  362 0000019E E7FF            B                end_3
  363 000001A0         
  364 000001A0         
  365 000001A0         end_3
  366 000001A0 F85D EB04       POP              {lr}
  367 000001A4 4770            BX               lr
  368 000001A6         
  369 000001A6         
  370 000001A6         
  371 000001A6         
  372 000001A6         
  373 000001A6         
  374 000001A6         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



ARM Macro Assembler    Page 9 


                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  375 000001A6         
  376 000001A6                 EXPORT           _kalloc
  377 000001A6         _kalloc
  378 000001A6         ;***************** START CODE **************************
                       ********
  379 000001A6         ; void* _k_alloc( int size)
  380 000001A6 E92D 5FFE       PUSH             {r1-r12, lr}
  381 000001AA 4601            MOV              r1, r0
  382 000001AC 4A14            LDR              r2, =MCB_TOP
  383 000001AE 4B15            LDR              r3, =MCB_BOT
  384 000001B0 F7FF FF47       BL               _ralloc
  385 000001B4         
  386 000001B4         
  387 000001B4         
  388 000001B4         
  389 000001B4         
  390 000001B4         
  391 000001B4         ; complete your code
  392 000001B4         ; return value should be saved into r0
  393 000001B4 E8BD 5FFE       POP              {r1-r12, lr}
  394 000001B8         ;****************** END ********************************
                       ********
  395 000001B8 4770            BX               lr
  396 000001BA         
  397 000001BA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  398 000001BA         ; Kernel Memory De-allocation
  399 000001BA         ; void *_kfree( void *ptr )
  400 000001BA                 EXPORT           _kfree
  401 000001BA         _kfree
  402 000001BA         ; *********************** MY CODE GOES HERE ************
                       ************
  403 000001BA         ; complete your code
  404 000001BA         ; return value should be saved into r0
  405 000001BA E92D 5FFE       PUSH             {r1-r12, lr}
  406 000001BE 4601            MOV              r1, r0
  407 000001C0         
  408 000001C0         ;int addr = (int)ptr;
  409 000001C0         
  410 000001C0         ; if (addr < heap_top || addr > heap_bot) {
  411 000001C0         ;   return NULL;
  412 000001C0         
  413 000001C0         ; int mcb_addr = mcb_top + (addr - heap_top) / 16;
  414 000001C0         
  415 000001C0         ;if (_rfree(mcb_addr) == 0) {
  416 000001C0         ;  return NULL;
  417 000001C0         ; return ptr;
  418 000001C0 490D            LDR              r1, =HEAP_TOP
  419 000001C2 4A0E            LDR              r2, =HEAP_BOT
  420 000001C4         ;if (addr < heap_top || addr > heap_bot) 
  421 000001C4 4290            CMP              r0, r2
  422 000001C6 DA10            BGE              not_in_bound
  423 000001C8 4288            CMP              r0, r1
  424 000001CA DB0E            BLT              not_in_bound
  425 000001CC         
  426 000001CC 4B0C            LDR              r3, =MCB_TOP
  427 000001CE         ;int mcb_addr = mcb_top + (addr - heap_top) / 16
  428 000001CE EBA0 0401       SUB              r4, r0, r1



ARM Macro Assembler    Page 10 


  429 000001D2 EA4F 1414       LSR              r4, #0x4
  430 000001D6 F04F 0100       MOV              r1, #0x0
  431 000001DA EB04 0103       ADD              r1, r4, r3
  432 000001DE B401            PUSH             {r0}
  433 000001E0 F7FF FF7A       BL               _rfree
  434 000001E4 BC02            POP              {r1}
  435 000001E6 2800            CMP              r0, #0x0
  436 000001E8 D101            BNE              valid
  437 000001EA         not_in_bound
  438 000001EA F04F 0000       MOV              r0, #0x0
  439 000001EE         valid
  440 000001EE 4608            MOV              r0, r1
  441 000001F0 E8BD 5FFE       POP              {r1-r12, lr}
  442 000001F4         ;********************** END ****************************
                       ******** 
  443 000001F4 4770            BX               lr
  444 000001F6         
  445 000001F6                 END
              00 00 20001000 
              20004FE0 
              20006800 
              20006BFE 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --depend=.
\objects\heap.d -o.\objects\heap.o -I.\RTE\_Target_1 -I"C:\Program Files\Keil\A
RM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include" -I"C:\Program Files\Keil\ARM\PACK\K
eil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__EVAL SETA 1" --predef
ine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C12
9XNCZAD SETA 1" --list=.\listings\heap.lst heap.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file heap.s
   Uses
      None
Comment: .text unused
_kalloc 000001A6

Symbol: _kalloc
   Definitions
      At line 377 in file heap.s
   Uses
      At line 376 in file heap.s
Comment: _kalloc used once
_kfree 000001BA

Symbol: _kfree
   Definitions
      At line 401 in file heap.s
   Uses
      At line 400 in file heap.s
Comment: _kfree used once
_kinit 00000000

Symbol: _kinit
   Definitions
      At line 29 in file heap.s
   Uses
      At line 28 in file heap.s
Comment: _kinit used once
_ralloc 00000042

Symbol: _ralloc
   Definitions
      At line 124 in file heap.s
   Uses
      At line 153 in file heap.s
      At line 166 in file heap.s
      At line 384 in file heap.s

_rfree 000000D8

Symbol: _rfree
   Definitions
      At line 263 in file heap.s
   Uses
      At line 317 in file heap.s
      At line 351 in file heap.s
      At line 433 in file heap.s

beyond_mcb 00000196

Symbol: beyond_mcb
   Definitions
      At line 356 in file heap.s
   Uses
      At line 290 in file heap.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 326 in file heap.s

else 00000096

Symbol: else
   Definitions
      At line 182 in file heap.s
   Uses
      At line 147 in file heap.s
Comment: else used once
end 000000D2

Symbol: end
   Definitions
      At line 220 in file heap.s
   Uses
      At line 168 in file heap.s
      At line 210 in file heap.s
      At line 214 in file heap.s
      At line 218 in file heap.s

end_1 000000CE

Symbol: end_1
   Definitions
      At line 216 in file heap.s
   Uses
      At line 178 in file heap.s
      At line 180 in file heap.s

end_3 000001A0

Symbol: end_3
   Definitions
      At line 365 in file heap.s
   Uses
      At line 319 in file heap.s
      At line 353 in file heap.s
      At line 358 in file heap.s
      At line 362 in file heap.s

end_BCM 0000003C

Symbol: end_BCM
   Definitions
      At line 82 in file heap.s
   Uses
      At line 77 in file heap.s
Comment: end_BCM used once
failure 000000C8

Symbol: failure
   Definitions
      At line 212 in file heap.s
   Uses
      At line 189 in file heap.s
      At line 197 in file heap.s

loop_BCM 00000026



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: loop_BCM
   Definitions
      At line 72 in file heap.s
   Uses
      At line 80 in file heap.s
Comment: loop_BCM used once
loop_heap 0000000E

Symbol: loop_heap
   Definitions
      At line 54 in file heap.s
   Uses
      At line 60 in file heap.s
Comment: loop_heap used once
next 0000001C

Symbol: next
   Definitions
      At line 62 in file heap.s
   Uses
      At line 58 in file heap.s
Comment: next used once
not_in_bound 000001EA

Symbol: not_in_bound
   Definitions
      At line 437 in file heap.s
   Uses
      At line 422 in file heap.s
      At line 424 in file heap.s

occupied 0000019C

Symbol: occupied
   Definitions
      At line 360 in file heap.s
   Uses
      At line 300 in file heap.s
      At line 306 in file heap.s
      At line 333 in file heap.s
      At line 339 in file heap.s

right 0000014E

Symbol: right
   Definitions
      At line 322 in file heap.s
   Uses
      At line 285 in file heap.s
Comment: right used once
success 00000082

Symbol: success
   Definitions
      At line 174 in file heap.s
   Uses
      At line 160 in file heap.s
Comment: success used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

valid 000001EE

Symbol: valid
   Definitions
      At line 439 in file heap.s
   Uses
      At line 436 in file heap.s
Comment: valid used once
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

HEAP_BOT 20004FE0

Symbol: HEAP_BOT
   Definitions
      At line 7 in file heap.s
   Uses
      At line 51 in file heap.s
      At line 419 in file heap.s

HEAP_TOP 20001000

Symbol: HEAP_TOP
   Definitions
      At line 6 in file heap.s
   Uses
      At line 50 in file heap.s
      At line 206 in file heap.s
      At line 418 in file heap.s

INVALID FFFFFFFF

Symbol: INVALID
   Definitions
      At line 16 in file heap.s
   Uses
      None
Comment: INVALID unused
MAX_SIZE 00004000

Symbol: MAX_SIZE
   Definitions
      At line 8 in file heap.s
   Uses
      At line 64 in file heap.s
Comment: MAX_SIZE used once
MCB_BOT 20006BFE

Symbol: MCB_BOT
   Definitions
      At line 12 in file heap.s
   Uses
      At line 73 in file heap.s
      At line 266 in file heap.s
      At line 383 in file heap.s

MCB_ENT_SZ 00000002

Symbol: MCB_ENT_SZ
   Definitions
      At line 13 in file heap.s
   Uses
      At line 74 in file heap.s
      At line 126 in file heap.s

MCB_TOP 20006800

Symbol: MCB_TOP
   Definitions
      At line 11 in file heap.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 63 in file heap.s
      At line 207 in file heap.s
      At line 265 in file heap.s
      At line 382 in file heap.s
      At line 426 in file heap.s

MCB_TOTAL 00000200

Symbol: MCB_TOTAL
   Definitions
      At line 14 in file heap.s
   Uses
      None
Comment: MCB_TOTAL unused
MIN_SIZE 00000020

Symbol: MIN_SIZE
   Definitions
      At line 9 in file heap.s
   Uses
      At line 52 in file heap.s
Comment: MIN_SIZE used once
9 symbols
367 symbols in table
