


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; void _bzero( void *s, int n )
    6 00000000         ; Parameters
    7 00000000         ; s   - pointer to the memory location to zero-initializ
                       e
    8 00000000         ; n  - a number of bytes to zero-initialize
    9 00000000         ; Return value
   10 00000000         ;   none
   11 00000000                 EXPORT           _bzero
   12 00000000         _bzero
   13 00000000         ; r0 = s
   14 00000000         ; r1 = n
   15 00000000 E92D 5FFE       PUSH             {r1-r12,lr}
   16 00000004         ;************* START CODE **************  
   17 00000004         ; you need to add some code here for part 1 implmentatio
                       n
   18 00000004 F04F 0200       MOV              R2, #0      ; This is value use
                                                            d to zero out the s
                                                            tring 
   19 00000008         for
   20 00000008 2900            CMP              R1, #0      ; check if it reach
                                                            ed to end of the st
                                                            ring 
   21 0000000A D004            BEQ              end_for     ;jump to end if rea
                                                            ched to end 
   22 0000000C F800 2B01       STRB             R2, [R0], #1 ;replace the str[i
                                                            ] with zero 
   23 00000010 F1A1 0101       SUB              R1, R1, #1  ; move to next inde
                                                            x
   24 00000014 E7F8            B                for         ; start the loop ag
                                                            ain 
   25 00000016         end_for
   26 00000016         ;************** END *********************
   27 00000016 E8BD 5FFE       POP              {r1-r12,lr}
   28 0000001A 4770            BX               lr
   29 0000001C         
   30 0000001C         
   31 0000001C         
   32 0000001C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   33 0000001C         ; char* _strncat( char* dest, char* src, int size )
   34 0000001C         ; Parameters
   35 0000001C         ;   dest  - pointer to the destination array
   36 0000001C         ; src  - pointer to string to be appended
   37 0000001C         ; size - Maximum number of characters to be appended
   38 0000001C         ; Return value
   39 0000001C         ;   dest
   40 0000001C                 EXPORT           _strncpy
   41 0000001C         _strncpy
   42 0000001C         ; r0 = dest
   43 0000001C         ; r1 = src
   44 0000001C         ; r2 = size
   45 0000001C E92D 5FFE       PUSH             {r1-r12,lr}
   46 00000020         ;************* START CODE **************  



ARM Macro Assembler    Page 2 


   47 00000020         loop
   48 00000020 2A00            CMP              R2, #0      ;check is stringA r
                                                            eached to end where
                                                             n==0 
   49 00000022 D006            BEQ              end_loop    ;finish the loop 
   50 00000024 F811 3B01       LDRB             R3, [R1], #1 ;get the value of 
                                                            stringA[i] and save
                                                             to R3 and advance 
                                                            the index 
   51 00000028 F800 3B01       STRB             R3, [R0], #1 ;store the R3 to s
                                                            tringB[i] and advan
                                                            ce the index 
   52 0000002C F1A2 0201       SUB              R2, R2, #1  ;subtract 1 from n
   53 00000030 E7F6            B                loop        ;start the loop aga
                                                            in
   54 00000032         end_loop
   55 00000032         ;**************** END ******************
   56 00000032 E8BD 5FFE       POP              {r1-r12,lr}
   57 00000036 4770            BX               lr
   58 00000038         
   59 00000038         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   60 00000038         ; void* _malloc( int size )
   61 00000038         ; Parameters
   62 00000038         ; size - #bytes to allocate
   63 00000038         ; Return value
   64 00000038         ;   void* a pointer to the allocated space
   65 00000038                 EXPORT           _malloc
   66 00000038         _malloc
   67 00000038         ; r0 = size
   68 00000038 E92D 5FFE       PUSH             {r1-r12,lr}
   69 0000003C         
   70 0000003C         ;*********** START CODE **********************
   71 0000003C F04F 0701       MOV              R7, #0x1    ; Set R7 with 1 
   72 00000040 DF00            SVC              #0x0        ;invoke handleer 
   73 00000042         ; you need to add two lines of code here for part 2 impl
                       mentation
   74 00000042         ; ************** END *************************
   75 00000042 E8BD 5FFE       POP              {r1-r12,lr}
   76 00000046 4770            BX               lr
   77 00000048         
   78 00000048         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   79 00000048         ; void _free( void* addr )
   80 00000048         ; Parameters
   81 00000048         ; size - the address of a space to deallocate
   82 00000048         ; Return value
   83 00000048         ;   none
   84 00000048                 EXPORT           _free
   85 00000048         _free
   86 00000048         ; r0 = addr
   87 00000048 E92D 5FFE       PUSH             {r1-r12,lr}
   88 0000004C         ;*********** Start Code **********************
   89 0000004C F04F 0702       MOV              R7, #0x2    ;set R7 with 2   
   90 00000050 DF00            SVC              #0x0        ;Invoke handler 
   91 00000052         ; you need to add two lines of code here for part 2 impl
                       mentation
   92 00000052         ; ************** End ********************************** 
                       



ARM Macro Assembler    Page 3 


   93 00000052 E8BD 5FFE       POP              {r1-r12,lr}
   94 00000056 4770            BX               lr
   95 00000058         
   96 00000058                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --depend=.
\objects\stdlib.d -o.\objects\stdlib.o -I.\RTE\_Target_1 -I"C:\Program Files\Ke
il\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include" -I"C:\Program Files\Keil\ARM\PA
CK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__EVAL SETA 1" --pr
edefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM
4C129XNCZAD SETA 1" --list=.\listings\stdlib.lst stdlib.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file stdlib.s
   Uses
      None
Comment: .text unused
_bzero 00000000

Symbol: _bzero
   Definitions
      At line 12 in file stdlib.s
   Uses
      At line 11 in file stdlib.s
Comment: _bzero used once
_free 00000048

Symbol: _free
   Definitions
      At line 85 in file stdlib.s
   Uses
      At line 84 in file stdlib.s
Comment: _free used once
_malloc 00000038

Symbol: _malloc
   Definitions
      At line 66 in file stdlib.s
   Uses
      At line 65 in file stdlib.s
Comment: _malloc used once
_strncpy 0000001C

Symbol: _strncpy
   Definitions
      At line 41 in file stdlib.s
   Uses
      At line 40 in file stdlib.s
Comment: _strncpy used once
end_for 00000016

Symbol: end_for
   Definitions
      At line 25 in file stdlib.s
   Uses
      At line 21 in file stdlib.s
Comment: end_for used once
end_loop 00000032

Symbol: end_loop
   Definitions
      At line 54 in file stdlib.s
   Uses
      At line 49 in file stdlib.s
Comment: end_loop used once
for 00000008

Symbol: for



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 19 in file stdlib.s
   Uses
      At line 24 in file stdlib.s
Comment: for used once
loop 00000020

Symbol: loop
   Definitions
      At line 47 in file stdlib.s
   Uses
      At line 53 in file stdlib.s
Comment: loop used once
9 symbols
344 symbols in table
